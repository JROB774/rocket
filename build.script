from shutil import copyfile

# Right now we are just specifying a bunch of stuff manually with no arguments/options. In the future
# we are going to want to implement a proper build script for this program which is more advanced.

copyfile("source/cstech/third_party/sdl2/bin/win32/SDL2.dll", "binary/SDL2.dll")
copyfile("source/cstech/third_party/sdl2_mixer/bin/win32/SDL2_mixer.dll", "binary/SDL2_mixer.dll")
copyfile("source/cstech/third_party/sdl2_mixer/bin/win32/libogg-0.dll", "binary/libogg-0.dll")
copyfile("source/cstech/third_party/sdl2_mixer/bin/win32/libvorbis-0.dll", "binary/libvorbis-0.dll")
copyfile("source/cstech/third_party/sdl2_mixer/bin/win32/libvorbisfile-3.dll", "binary/libvorbisfile-3.dll")

config = empty_config()

config["dependencies"] = []
config["output"] = "binary/rocket.exe"
config["cpp"] = "c++17"
config["debug"] = True
config["unity"] = True
config["compiler_params"] = "-EHsc -MT -W3 -Z7 -O2"
config["linker_params"] =  "-ignore:4099"

config["include_dirs"] = [
    "source",
    "source/cstech/source",
    "source/cstech/source/general",
    "source/cstech/source/sdl2",
    "source/cstech/source/opengl",
    "source/cstech/third_party/sdl2/include",
    "source/cstech/third_party/sdl2/include/SDL2",
    "source/cstech/third_party/sdl2_mixer/include",
    "source/cstech/third_party/sdl2_mixer/include/SDL2",
    "source/cstech/third_party/glad",
    "source/cstech/third_party/imgui",
    "source/cstech/third_party/nothings",
    "source/cstech/third_party/nlohmann",
    "source/cstech/third_party/csmath"
]
config["library_dirs"] = [
    "source/cstech/third_party/sdl2/lib/win32",
    "source/cstech/third_party/sdl2_mixer/lib/win32"
]
config["libraries"] = [
    "SDL2main.lib",
    "SDL2.lib",
    "SDL2_mixer.lib",
    "opengl32.lib",
    "dinput8.lib",
    "dxguid.lib",
    "user32.lib",
    "gdi32.lib",
    "winmm.lib",
    "imm32.lib",
    "ole32.lib",
    "oleaut32.lib",
    "shell32.lib",
    "version.lib",
    "uuid.lib",
    "advapi32.lib",
    "setupapi.lib",
    "setargv.obj"
]
config["defines"] = [
    "_CRT_SECURE_NO_WARNINGS=1",
    "CS_PLATFORM_SDL2=1",
    "CS_COMPILER_MSVC=1",
    "CS_DEBUG=0",
    "SDL_MAIN_HANDLED=1"
]
config["sources"] = [
    "source/rocket.cpp"
]

exclude_dirs = set(["faudio", "stub", "imgui"])
exclude_files = set(["stb_image_write.h", "stb_image_write.c", "stb_rect_pack.h", "stb_rect_pack.c"])
third_party_dir = "source/cstech/third_party"
for root, dirs, files in os.walk(third_party_dir):
    dirs[:] = [d for d in dirs if d not in exclude_dirs]
    files[:] = [f for f in files if f not in exclude_files]
    for dir in dirs:
        config["include_dirs"].append(os.path.join(root, dir))
    for file in files:
        file_name = os.path.join(root, file)
        extension = os.path.splitext(file_name)[1]
        if extension in [ ".cpp", ".c" ]:
            config["sources"].append(file_name)
        elif extension in [ ".hpp", ".h" ]:
            config["headers"].append(file_name)

generate_config(config)
